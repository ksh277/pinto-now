generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                                       BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  username                                 String?          @unique(map: "username") @db.VarChar(50)
  email                                    String           @unique(map: "email") @db.VarChar(255)
  password_hash                            String           @db.VarChar(255)
  status                                   users_status     @default(ACTIVE)
  createdAt                                DateTime?        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt                                DateTime?        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  addresses                                addresses[]
  admin_logs                               admin_logs[]
  cart_items                               cart_items[]
  comment_likes                            comment_likes[]
  comments                                 comments[]
  editor_designs                           editor_designs[]
  favorites                                favorites[]
  follows_follows_follower_idTousers       follows[]        @relation("follows_follower_idTousers")
  follows_follows_following_idTousers      follows[]        @relation("follows_following_idTousers")
  media_uploads                            media_uploads[]
  notifications                            notifications[]
  orders                                   orders[]
  point_ledger                             point_ledger[]
  post_likes                               post_likes[]
  posts                                    posts[]
  product_likes                            product_likes[]
  user_coupons                             user_coupons[]
  user_roles_user_roles_user_idTousers     user_roles[]     @relation("user_roles_user_idTousers")
  user_roles_user_roles_assigned_byTousers user_roles[]     @relation("user_roles_assigned_byTousers")

  @@index([email], map: "idx_email")
  @@index([status], map: "idx_status")
  @@map("users")
}

model banners {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title      String    @db.VarChar(255)
  image_url  String    @db.VarChar(512)
  href       String?   @db.VarChar(255)
  start_at   DateTime  @db.DateTime(0)
  end_at     DateTime  @db.DateTime(0)
  sort_order Int?      @default(0)
  is_active  Boolean?  @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamp(0)

  @@index([is_active, start_at, end_at], map: "idx_active_dates")
  @@index([sort_order], map: "idx_sort_order")
}

model addresses {
  id         BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt         @db.UnsignedBigInt
  label      String?        @db.VarChar(60)
  type       addresses_type @default(SHIPPING)
  receiver   String         @db.VarChar(80)
  phone      String         @db.VarChar(30)
  zip        String?        @db.VarChar(20)
  line1      String         @db.VarChar(255)
  line2      String?        @db.VarChar(255)
  city       String?        @db.VarChar(100)
  state      String?        @db.VarChar(100)
  country    String?        @default("í•œêµ­") @db.VarChar(50)
  is_default Boolean?       @default(false)
  created_at DateTime?      @default(now()) @db.Timestamp(0)
  users      User           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "addresses_ibfk_1")

  @@index([user_id, is_default], map: "idx_user_default")
}

model admin_logs {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  admin_id    BigInt    @db.UnsignedBigInt
  action      String    @db.VarChar(100)
  target_type String?   @db.VarChar(50)
  target_id   BigInt?   @db.UnsignedBigInt
  changes     Json?
  ip_address  String?   @db.VarChar(45)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  users       User      @relation(fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "admin_logs_ibfk_1")

  @@index([action], map: "idx_action")
  @@index([admin_id, created_at(sort: Desc)], map: "idx_admin_created")
  @@index([target_type, target_id], map: "idx_target")
}

model artist_goods {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  product_id  BigInt    @db.UnsignedBigInt
  artist_name String?   @db.VarChar(120)
  group_name  String?   @db.VarChar(120)
  fandom      String?   @db.VarChar(120)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  products    products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "artist_goods_ibfk_1")

  @@index([artist_name], map: "idx_artist")
  @@index([fandom], map: "idx_fandom")
  @@index([product_id], map: "idx_product")
}

model cart_items {
  id             BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  user_id        BigInt          @db.UnsignedBigInt
  product_id     BigInt          @db.UnsignedBigInt
  design_id      BigInt?         @db.UnsignedBigInt
  qty            Int             @default(1)
  options        Json?
  created_at     DateTime?       @default(now()) @db.Timestamp(0)
  updated_at     DateTime?       @default(now()) @db.Timestamp(0)
  users          User            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cart_items_ibfk_1")
  products       products        @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cart_items_ibfk_2")
  editor_designs editor_designs? @relation(fields: [design_id], references: [id], onUpdate: NoAction, map: "cart_items_ibfk_3")

  @@index([design_id], map: "design_id")
  @@index([product_id], map: "idx_product")
  @@index([user_id], map: "idx_user")
}

model categories {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name        String    @db.VarChar(120)
  slug        String    @unique(map: "slug") @db.VarChar(160)
  parent_id   BigInt?   @db.UnsignedBigInt
  description String?   @db.Text
  icon_url    String?   @db.VarChar(512)
  sort_order  Int?      @default(0)
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(0)

  @@index([parent_id, is_active], map: "idx_parent_active")
  @@index([slug], map: "idx_slug")
  @@index([sort_order], map: "idx_sort_order")
}

model category_shortcuts {
  id         BigInt    @id @default(autoincrement())
  title      String    @db.VarChar(100)
  image_url  String    @db.Text
  href       String    @db.VarChar(500)
  sort_order Int?      @default(0)
  is_active  Boolean?  @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)

  @@index([is_active, sort_order], map: "idx_active_sort")
}

model cms_settings {
  key         String            @id @db.VarChar(100)
  value       String            @db.Text
  type        cms_settings_type @default(TEXT)
  category    String            @db.VarChar(50)
  description String?           @db.VarChar(255)
  updated_by  BigInt?           @db.UnsignedBigInt
  updated_at  DateTime?         @default(now()) @db.Timestamp(0)

  @@index([category], map: "idx_category")
  @@index([updated_by], map: "updated_by")
}

model comment_likes {
  user_id    BigInt    @db.UnsignedBigInt
  comment_id BigInt    @db.UnsignedBigInt
  created_at DateTime? @default(now()) @db.Timestamp(0)
  users      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_likes_ibfk_1")
  comments   comments  @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_likes_ibfk_2")

  @@id([user_id, comment_id])
  @@index([comment_id], map: "idx_comment")
}

model comments {
  id             BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  post_id        BigInt          @db.UnsignedBigInt
  user_id        BigInt          @db.UnsignedBigInt
  parent_id      BigInt?         @db.UnsignedBigInt
  content        String          @db.Text
  like_count     Int?            @default(0)
  is_hidden      Boolean?        @default(false)
  created_at     DateTime?       @default(now()) @db.Timestamp(0)
  updated_at     DateTime?       @default(now()) @db.Timestamp(0)
  comment_likes  comment_likes[]
  posts          posts           @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_ibfk_1")
  users          User            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comments_ibfk_2")
  comments       comments?       @relation("commentsTocomments", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_ibfk_3")
  other_comments comments[]      @relation("commentsTocomments")

  @@index([parent_id], map: "idx_parent")
  @@index([post_id, created_at], map: "idx_post_created")
  @@index([user_id], map: "idx_user")
}

model community_posts {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt   @db.UnsignedBigInt
  title       String
  body        String?  @db.MediumText
  images_json Json?
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @default(now()) @db.Timestamp(0)

  @@index([user_id], map: "idx_posts_user")
}

model coupons {
  id             BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  code           String         @unique(map: "code") @db.VarChar(50)
  name           String         @db.VarChar(255)
  type           coupons_type
  value          Decimal        @db.Decimal(10, 2)
  min_amount     Decimal?       @default(0.00) @db.Decimal(10, 2)
  max_discount   Decimal?       @db.Decimal(10, 2)
  usage_limit    Int?           @default(0)
  usage_count    Int?           @default(0)
  per_user_limit Int?           @default(1)
  start_at       DateTime       @db.DateTime(0)
  end_at         DateTime       @db.DateTime(0)
  is_active      Boolean?       @default(true)
  created_at     DateTime?      @default(now()) @db.Timestamp(0)
  updated_at     DateTime?      @default(now()) @db.Timestamp(0)
  user_coupons   user_coupons[]

  @@index([is_active, start_at, end_at], map: "idx_active_dates")
  @@index([code], map: "idx_code")
}

model design {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  name       String
  created_by BigInt?  @db.UnsignedBigInt
  created_at DateTime @default(now()) @db.Timestamp(0)

  @@index([created_by], map: "created_by")
}

model editor_assets {
  id         BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  name       String             @db.VarChar(255)
  category   String             @db.VarChar(100)
  url        String             @db.VarChar(512)
  type       editor_assets_type
  is_free    Boolean?           @default(true)
  is_active  Boolean?           @default(true)
  created_at DateTime?          @default(now()) @db.Timestamp(0)

  @@index([is_active, is_free], map: "idx_active_free")
  @@index([category, type], map: "idx_category_type")
}

model editor_designs {
  id          BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt                @db.UnsignedBigInt
  product_id  BigInt                @db.UnsignedBigInt
  name        String                @db.VarChar(255)
  design_data Json
  preview_url String?               @db.VarChar(512)
  status      editor_designs_status @default(DRAFT)
  is_public   Boolean?              @default(false)
  created_at  DateTime?             @default(now()) @db.Timestamp(0)
  updated_at  DateTime?             @default(now()) @db.Timestamp(0)
  cart_items  cart_items[]
  users       User                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "editor_designs_ibfk_1")
  products    products              @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "editor_designs_ibfk_2")
  order_items order_items[]

  @@index([user_id, product_id], map: "idx_editor_designs_user_product")
  @@index([product_id], map: "idx_product")
  @@index([is_public, created_at(sort: Desc)], map: "idx_public")
  @@index([user_id, status], map: "idx_user_status")
}

model editor_templates {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name          String    @db.VarChar(255)
  category      String    @db.VarChar(100)
  template_data Json
  thumbnail_url String?   @db.VarChar(512)
  is_active     Boolean?  @default(true)
  sort_order    Int?      @default(0)
  created_at    DateTime? @default(now()) @db.Timestamp(0)

  @@index([category, is_active], map: "idx_category_active")
  @@index([sort_order], map: "idx_sort_order")
}

model faq {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  category   String?  @db.VarChar(100)
  question   String   @db.VarChar(255)
  answer     String?  @db.MediumText
  order_no   Int      @default(0)
  is_open    Boolean  @default(true)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
}

model favorites {
  user_id    BigInt    @db.UnsignedBigInt
  product_id BigInt    @db.UnsignedBigInt
  created_at DateTime? @default(now()) @db.Timestamp(0)
  users      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favorites_ibfk_1")
  products   products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favorites_ibfk_2")

  @@id([user_id, product_id])
  @@index([created_at(sort: Desc)], map: "idx_created_at")
  @@index([product_id], map: "idx_product")
}

model follows {
  follower_id                       BigInt    @db.UnsignedBigInt
  following_id                      BigInt    @db.UnsignedBigInt
  created_at                        DateTime? @default(now()) @db.Timestamp(0)
  users_follows_follower_idTousers  User      @relation("follows_follower_idTousers", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "follows_ibfk_1")
  users_follows_following_idTousers User      @relation("follows_following_idTousers", fields: [following_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "follows_ibfk_2")

  @@id([follower_id, following_id])
  @@index([following_id], map: "idx_following")
}

model guides {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  slug       String   @unique(map: "slug")
  title      String
  body       String?  @db.MediumText
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
}

model inquiries {
  id          BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt           @db.UnsignedBigInt
  product_id  BigInt?          @db.UnsignedBigInt
  title       String
  body        String?          @db.Text
  status      inquiries_status @default(open)
  answer_text String?          @db.Text
  answered_by BigInt?          @db.UnsignedBigInt
  created_at  DateTime         @default(now()) @db.Timestamp(0)
  updated_at  DateTime         @default(now()) @db.Timestamp(0)

  @@index([answered_by], map: "answered_by")
  @@index([product_id], map: "idx_inquiries_product")
  @@index([user_id], map: "user_id")
}

model inventory_movements {
  id         BigInt                     @id @default(autoincrement()) @db.UnsignedBigInt
  product_id BigInt                     @db.UnsignedBigInt
  qty        Int
  reason     inventory_movements_reason
  ref_type   String?                    @db.VarChar(50)
  ref_id     BigInt?                    @db.UnsignedBigInt
  created_at DateTime?                  @default(now()) @db.Timestamp(0)
  products   products                   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_movements_ibfk_1")

  @@index([product_id, created_at(sort: Desc)], map: "idx_product_created")
}

model media_uploads {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  filename      String    @db.VarChar(255)
  original_name String    @db.VarChar(255)
  url           String    @db.VarChar(512)
  size          Int       @db.UnsignedInt
  mime_type     String    @db.VarChar(100)
  uploaded_by   BigInt    @db.UnsignedBigInt
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  users         User      @relation(fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "media_uploads_ibfk_1")

  @@index([created_at(sort: Desc)], map: "idx_created_at")
  @@index([uploaded_by], map: "idx_uploaded_by")
}

model notices {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  title      String
  body       String?  @db.MediumText
  is_pinned  Boolean  @default(false)
  created_by BigInt?  @db.UnsignedBigInt
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)

  @@index([created_by], map: "created_by")
}

model notifications {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  type       String    @db.VarChar(50)
  title      String    @db.VarChar(255)
  content    String?   @db.Text
  ref_type   String?   @db.VarChar(50)
  ref_id     BigInt?   @db.UnsignedBigInt
  is_read    Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  users      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_ibfk_1")

  @@index([created_at(sort: Desc)], map: "idx_created_at")
  @@index([user_id, type, is_read], map: "idx_notifications_user_type_read")
  @@index([user_id, is_read], map: "idx_user_read")
}

model order_items {
  id              BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  order_id        BigInt          @db.UnsignedBigInt
  product_id      BigInt          @db.UnsignedBigInt
  design_id       BigInt?         @db.UnsignedBigInt
  product_name    String          @db.VarChar(255)
  qty             Int
  unit_price      Decimal         @db.Decimal(10, 2)
  option_snapshot Json?
  created_at      DateTime?       @default(now()) @db.Timestamp(0)
  orders          orders          @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_items_ibfk_1")
  products        products        @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_items_ibfk_2")
  editor_designs  editor_designs? @relation(fields: [design_id], references: [id], onUpdate: NoAction, map: "order_items_ibfk_3")

  @@index([design_id], map: "design_id")
  @@index([order_id], map: "idx_order")
  @@index([product_id], map: "idx_product")
  @@index([product_id, created_at], map: "idx_product_created")
}

model orders {
  id              BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  user_id         BigInt         @db.UnsignedBigInt
  order_no        String         @unique(map: "order_no") @db.VarChar(50)
  status          orders_status  @default(PENDING)
  total_amount    Decimal        @db.Decimal(10, 2)
  discount_amount Decimal?       @default(0.00) @db.Decimal(10, 2)
  shipping_fee    Decimal?       @default(0.00) @db.Decimal(10, 2)
  point_used      Int?           @default(0)
  addr_snapshot   Json
  memo            String?        @db.VarChar(255)
  created_at      DateTime?      @default(now()) @db.Timestamp(0)
  updated_at      DateTime?      @default(now()) @db.Timestamp(0)
  order_items     order_items[]
  users           User           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_ibfk_1")
  payments        payments[]
  shipments       shipments[]
  user_coupons    user_coupons[]

  @@index([created_at(sort: Desc)], map: "idx_created_at")
  @@index([order_no], map: "idx_order_no")
  @@index([user_id, status, created_at(sort: Desc)], map: "idx_orders_user_status_created")
  @@index([status], map: "idx_status")
  @@index([user_id, status], map: "idx_user_status")
}

model payments {
  id         BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  order_id   BigInt            @db.UnsignedBigInt
  provider   payments_provider @default(PORTONE)
  tx_id      String?           @db.VarChar(255)
  method     String?           @db.VarChar(50)
  amount     Decimal           @db.Decimal(10, 2)
  status     payments_status   @default(INIT)
  raw        Json?
  created_at DateTime?         @default(now()) @db.Timestamp(0)
  updated_at DateTime?         @default(now()) @db.Timestamp(0)
  orders     orders            @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "payments_ibfk_1")

  @@index([order_id], map: "idx_order")
  @@index([status], map: "idx_status")
  @@index([tx_id], map: "idx_tx_id")
}

model point_ledger {
  id         BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt                 @db.UnsignedBigInt
  direction  point_ledger_direction
  amount     Int
  balance    Int
  earn_rate  Decimal?               @default(2.00) @db.Decimal(5, 2)
  reason     String                 @db.VarChar(120)
  ref_type   String?                @db.VarChar(50)
  ref_id     BigInt?                @db.UnsignedBigInt
  expires_at DateTime?              @db.DateTime(0)
  created_at DateTime?              @default(now()) @db.Timestamp(0)
  users      User                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "point_ledger_ibfk_1")

  @@index([direction], map: "idx_direction")
  @@index([expires_at], map: "idx_expires")
  @@index([user_id, direction], map: "idx_point_ledger_user_direction")
  @@index([user_id, created_at(sort: Desc)], map: "idx_user_created")
}

model post_categories {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name        String    @db.VarChar(120)
  slug        String    @unique(map: "slug") @db.VarChar(160)
  description String?   @db.Text
  sort_order  Int?      @default(0)
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  posts       posts[]

  @@index([is_active, sort_order], map: "idx_active_sort")
  @@index([slug], map: "idx_slug")
}

model post_likes {
  user_id    BigInt    @db.UnsignedBigInt
  post_id    BigInt    @db.UnsignedBigInt
  created_at DateTime? @default(now()) @db.Timestamp(0)
  users      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_likes_ibfk_1")
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_likes_ibfk_2")

  @@id([user_id, post_id])
  @@index([post_id], map: "idx_post")
}

model posts {
  id              BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  user_id         BigInt          @db.UnsignedBigInt
  category_id     BigInt          @db.UnsignedBigInt
  title           String          @db.VarChar(255)
  content         String          @db.Text
  images          Json?
  view_count      Int?            @default(0)
  like_count      Int?            @default(0)
  comment_count   Int?            @default(0)
  is_pinned       Boolean?        @default(false)
  is_hidden       Boolean?        @default(false)
  created_at      DateTime?       @default(now()) @db.Timestamp(0)
  updated_at      DateTime?       @default(now()) @db.Timestamp(0)
  comments        comments[]
  post_likes      post_likes[]
  users           User            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_ibfk_1")
  post_categories post_categories @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_ibfk_2")

  @@index([category_id, created_at(sort: Desc)], map: "idx_category_created")
  @@index([is_hidden], map: "idx_hidden")
  @@index([is_pinned(sort: Desc), created_at(sort: Desc)], map: "idx_pinned_created")
  @@index([category_id, is_pinned(sort: Desc), created_at(sort: Desc)], map: "idx_posts_category_pinned_created")
  @@index([user_id, created_at(sort: Desc)], map: "idx_user_created")
}

model product_assets {
  id         BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  product_id BigInt              @db.UnsignedBigInt
  url        String              @db.VarChar(512)
  kind       product_assets_kind @default(IMAGE)
  sort_order Int?                @default(0)
  alt_text   String?             @db.VarChar(255)
  created_at DateTime?           @default(now()) @db.Timestamp(0)
  products   products            @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_assets_ibfk_1")

  @@index([product_id, kind], map: "idx_product_kind")
  @@index([product_id, sort_order], map: "idx_sort_order")
}

model product_clicks {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  product_id BigInt    @db.UnsignedBigInt
  user_id    BigInt?   @db.UnsignedBigInt
  ip_address String    @db.VarChar(45)
  user_agent String?   @db.Text
  clicked_at DateTime? @default(now()) @db.Timestamp(0)

  @@index([ip_address, clicked_at(sort: Desc)], map: "idx_ip_time")
  @@index([product_id, clicked_at(sort: Desc)], map: "idx_product_time")
}

model product_likes {
  user_id    BigInt   @db.UnsignedBigInt
  product_id BigInt   @db.UnsignedBigInt
  created_at DateTime @default(now()) @db.Timestamp(0)
  users      User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_likes_ibfk_1")
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_likes_ibfk_2")

  @@id([user_id, product_id])
  @@index([product_id], map: "idx_product_likes_product")
}

model product_options {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  product_id  BigInt    @db.UnsignedBigInt
  opt_name    String    @db.VarChar(120)
  opt_value   String    @db.VarChar(120)
  extra_price Decimal?  @default(0.00) @db.Decimal(10, 2)
  stock       Int?      @default(0)
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  products    products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_options_ibfk_1")

  @@index([product_id, is_active], map: "idx_product_active")
}

model product_shelf_banner_products {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  banner_id  BigInt    @db.UnsignedBigInt
  product_id BigInt    @db.UnsignedBigInt
  sort_order Int?      @default(0)
  created_at DateTime? @default(now()) @db.Timestamp(0)

  @@unique([banner_id, product_id], map: "unique_banner_product")
  @@index([banner_id, sort_order], map: "idx_banner_sort")
  @@index([product_id], map: "product_id")
}

model product_shelf_banners {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title       String    @db.VarChar(255)
  description String    @db.Text
  image_url   String    @db.VarChar(512)
  sort_order  Int?      @default(0)
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)

  @@index([is_active, sort_order], map: "idx_active_sort")
}

model product_stats {
  product_id    BigInt   @id @db.UnsignedBigInt
  likes_count   Int      @default(0) @db.UnsignedInt
  reviews_count Int      @default(0) @db.UnsignedInt
  sales_count   Int      @default(0) @db.UnsignedInt
  updated_at    DateTime @default(now()) @db.Timestamp(0)
}

model products {
  id                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  seller_id           BigInt                @db.UnsignedBigInt
  category_id         BigInt                @db.UnsignedBigInt
  name                String                @db.VarChar(255)
  slug                String                @unique(map: "slug") @db.VarChar(255)
  description         String?               @db.Text
  price               Decimal               @db.Decimal(10, 2)
  stock               Int?                  @default(0)
  status              products_status       @default(DRAFT)
  is_customizable     Boolean?              @default(false)
  thumbnail_url       String?               @db.VarChar(512)
  rating_avg          Decimal?              @default(0.0) @db.Decimal(2, 1)
  review_count        Int?                  @default(0)
  view_count          Int?                  @default(0)
  created_at          DateTime?             @default(now()) @db.Timestamp(0)
  updated_at          DateTime?             @default(now()) @db.Timestamp(0)
  artist_goods        artist_goods[]
  cart_items          cart_items[]
  editor_designs      editor_designs[]
  favorites           favorites[]
  inventory_movements inventory_movements[]
  order_items         order_items[]
  product_assets      product_assets[]
  product_likes       product_likes[]
  product_options     product_options[]

  @@index([category_id, status], map: "idx_category_status")
  @@index([created_at(sort: Desc)], map: "idx_created_at")
  @@index([is_customizable], map: "idx_customizable")
  @@index([category_id, status, created_at(sort: Desc)], map: "idx_products_category_status_created")
  @@index([seller_id, status, created_at(sort: Desc)], map: "idx_products_seller_status_created")
  @@index([rating_avg(sort: Desc)], map: "idx_rating")
  @@index([seller_id, status], map: "idx_seller_status")
  @@index([slug], map: "idx_slug")
}

model review_comments {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  review_id  BigInt    @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  parent_id  BigInt?   @db.UnsignedBigInt
  content    String    @db.Text
  is_hidden  Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)

  @@index([created_at(sort: Desc)], map: "idx_created_at")
  @@index([parent_id], map: "idx_parent")
  @@index([review_id], map: "idx_review")
  @@index([user_id], map: "idx_user")
}

model review_likes {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  review_id  BigInt    @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  created_at DateTime? @default(now()) @db.Timestamp(0)

  @@unique([review_id, user_id], map: "unique_review_like")
  @@index([created_at(sort: Desc)], map: "idx_created_at")
  @@index([review_id], map: "idx_review")
  @@index([user_id], map: "idx_user")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  product_id    BigInt    @db.UnsignedBigInt
  user_id       BigInt    @db.UnsignedBigInt
  order_item_id BigInt?   @db.UnsignedBigInt
  rating        Int       @db.TinyInt
  content       String?   @db.Text
  images        Json?
  is_hidden     Boolean?  @default(false)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  updated_at    DateTime? @default(now()) @db.Timestamp(0)
  like_count    Int?      @default(0)
  comment_count Int?      @default(0)

  @@index([comment_count(sort: Desc)], map: "idx_comment_count")
  @@index([created_at(sort: Desc)], map: "idx_created_at")
  @@index([like_count(sort: Desc)], map: "idx_like_count")
  @@index([product_id, is_hidden], map: "idx_product_hidden")
  @@index([rating], map: "idx_rating")
  @@index([user_id], map: "idx_user")
  @@index([order_item_id], map: "order_item_id")
}

model roles {
  id         Int          @id @default(autoincrement()) @db.UnsignedInt
  code       String       @unique(map: "code") @db.VarChar(40)
  name       String       @db.VarChar(80)
  user_roles user_roles[]
}

model sellers {
  id          BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt              @db.UnsignedBigInt
  brand_name  String              @db.VarChar(120)
  status      sellers_status      @default(PENDING)
  biz_reg_no  String?             @db.VarChar(40)
  cs_email    String?             @db.VarChar(255)
  cs_phone    String?             @db.VarChar(30)
  created_at  DateTime?           @default(now()) @db.Timestamp(0)
  updated_at  DateTime?           @default(now()) @db.Timestamp(0)
  seller_type sellers_seller_type @default(COMPANY)

  @@index([status], map: "idx_status")
  @@index([user_id], map: "idx_user")
}

model shipment_events {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  shipment_id BigInt    @db.UnsignedBigInt
  event_time  DateTime  @db.DateTime(0)
  location    String?   @db.VarChar(255)
  description String    @db.Text
  raw         Json?
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  shipments   shipments @relation(fields: [shipment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "shipment_events_ibfk_1")

  @@index([shipment_id, event_time(sort: Desc)], map: "idx_shipment_time")
}

model shipments {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  order_id        BigInt            @db.UnsignedBigInt
  carrier         String?           @db.VarChar(60)
  tracking_no     String?           @db.VarChar(120)
  status          shipments_status  @default(READY)
  shipped_at      DateTime?         @db.DateTime(0)
  delivered_at    DateTime?         @db.DateTime(0)
  created_at      DateTime?         @default(now()) @db.Timestamp(0)
  updated_at      DateTime?         @default(now()) @db.Timestamp(0)
  shipment_events shipment_events[]
  orders          orders            @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shipments_ibfk_1")

  @@index([order_id], map: "idx_order")
  @@index([status], map: "idx_status")
  @@index([tracking_no], map: "idx_tracking")
}

model slides {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title      String    @db.VarChar(255)
  subtitle   String?   @db.VarChar(255)
  image_url  String    @db.VarChar(512)
  href       String?   @db.VarChar(255)
  sort_order Int?      @default(0)
  is_active  Boolean?  @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)

  @@index([is_active, sort_order], map: "idx_active_sort")
}

model system_configs {
  key         String    @id @db.VarChar(100)
  value       String    @db.Text
  description String?   @db.VarChar(255)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
}

model user_coupons {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id         BigInt    @db.UnsignedBigInt
  coupon_id       BigInt    @db.UnsignedBigInt
  order_id        BigInt?   @db.UnsignedBigInt
  discount_amount Decimal   @db.Decimal(10, 2)
  used_at         DateTime? @default(now()) @db.Timestamp(0)
  users           User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_coupons_ibfk_1")
  coupons         coupons   @relation(fields: [coupon_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_coupons_ibfk_2")
  orders          orders?   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_coupons_ibfk_3")

  @@index([coupon_id], map: "coupon_id")
  @@index([order_id], map: "idx_order")
  @@index([user_id, coupon_id], map: "idx_user_coupon")
}

model user_profiles {
  user_id                 BigInt    @id @db.UnsignedBigInt
  nickname                String    @unique(map: "nickname") @db.VarChar(40)
  name                    String?   @db.VarChar(80)
  phone                   String?   @db.VarChar(30)
  avatar_url              String?   @db.VarChar(512)
  birthdate               DateTime? @db.Date
  bio                     String?   @db.Text
  sns_instagram           String?   @db.VarChar(100)
  sns_twitter             String?   @db.VarChar(100)
  marketing_opt_in        Boolean?  @default(false)
  community_notifications Boolean?  @default(true)
  created_at              DateTime? @default(now()) @db.Timestamp(0)
  updated_at              DateTime? @default(now()) @db.Timestamp(0)

  @@index([nickname], map: "idx_nickname")
}

model user_roles {
  user_id                             BigInt    @db.UnsignedBigInt
  role_id                             Int       @db.UnsignedInt
  assigned_by                         BigInt?   @db.UnsignedBigInt
  assigned_at                         DateTime? @default(now()) @db.Timestamp(0)
  users_user_roles_user_idTousers     User      @relation("user_roles_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_ibfk_1")
  roles                               roles     @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_ibfk_2")
  users_user_roles_assigned_byTousers User?     @relation("user_roles_assigned_byTousers", fields: [assigned_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_roles_ibfk_3")

  @@id([user_id, role_id])
  @@index([assigned_by], map: "assigned_by")
  @@index([role_id], map: "role_id")
}

model weekly_rankings {
  id            BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  product_id    BigInt                      @db.UnsignedBigInt
  seller_type   weekly_rankings_seller_type
  week_start    DateTime                    @db.Date
  week_end      DateTime                    @db.Date
  sales_count   Int?                        @default(0)
  click_count   Int?                        @default(0)
  ranking_score Decimal?                    @default(0.000) @db.Decimal(10, 3)
  rank_position Int
  created_at    DateTime?                   @default(now()) @db.Timestamp(0)
  updated_at    DateTime?                   @default(now()) @db.Timestamp(0)

  @@index([product_id, week_start], map: "idx_product_week")
  @@index([week_start, seller_type, rank_position], map: "idx_week_type_rank")
}

enum cms_settings_type {
  TEXT
  IMAGE
  JSON
  NUMBER
}

enum payments_provider {
  PORTONE
  KCP
  ETC
}

enum point_ledger_direction {
  EARN
  SPEND
  EXPIRE
  ADJUST
}

enum weekly_rankings_seller_type {
  individual
  business
}

enum addresses_type {
  SHIPPING
  BILLING
}

enum coupons_type {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum inventory_movements_reason {
  ORDER
  CANCEL
  MANUAL
  ADJUST
}

enum orders_status {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum product_assets_kind {
  IMAGE
  FILE
  VIDEO
}

enum sellers_status {
  PENDING
  ACTIVE
  SUSPENDED
}

enum editor_assets_type {
  IMAGE
  FONT
  ICON
  STICKER
}

enum shipments_status {
  READY
  IN_TRANSIT
  DELIVERED
  RETURNED
}

enum users_status {
  ACTIVE
  SUSPENDED
  DELETED
}

enum inquiries_status {
  open
  answered
  closed
}

enum editor_designs_status {
  DRAFT
  COMPLETED
  ORDERED
}

enum payments_status {
  INIT
  PAID
  FAILED
  CANCELLED
  REFUNDED
}

enum products_status {
  DRAFT
  ACTIVE
  HIDDEN
}

enum sellers_seller_type {
  COMPANY
  CREATOR
  AUTHOR
  INDIVIDUAL
}
